#### Packages ####
library(plotly)
library(tidyverse)
library(gridExtra)
library(gganimate)
library(gifski)
library(viridisLite)

#### Data ####
# Set working directory to source file location (Session, Set Working Directory)
price_df <- read.csv("prices.csv")
head(price_df)

# ggplot2
#### Required Elements ####
# You need data, mapping, and layers to create a plot with ggplot
p <- ggplot(data = price_df, aes(x = corn_price, y = soy_price)) +
  geom_point() +
  geom_smooth(formula = y~x, method = "lm")

plot(p)

# How to save? - Use png or other filename function, call your plot, then dev.off.
# Or use the Plots, Export button
# Initialize png with your file name 
png("my_png.png", width = 1000, height = 800, res = 100)

# Plot
plot(p)

# Close the png writing
dev.off()


#### Optional Elements ####
# Scales - Control how data appears visually. 
ggplot(data = price_df, aes(x = corn_price, y = soy_price, color = state)) +
  geom_point() +
  geom_smooth(formula = y~x, method = "lm") +
  scale_color_viridis_d()

# Facets - Quickly subset charts
price_df %>% mutate(year = year(date)) %>% # we can use the year() function from lubridate to grab the year from our date column
  filter(year %in% c(2022, 2023, 2024)) %>%  
  ggplot(aes(x = corn_price, y = soy_price, color = state)) +
  geom_point() +
  geom_smooth(formula = y~x, method = "lm") +
  scale_color_viridis_d() +
  facet_grid(state ~ year)

# Coordinates - Control anything to do with you coordinates
price_df %>% mutate(year = year(date)) %>% # we can use the year() function from lubridate to grab the year from our date column
  filter(year %in% c(2022,2023,2024)) %>%  
  ggplot(aes(x = corn_price, y = soy_price, color = state)) +
  geom_point() +
  geom_smooth(formula = y~x, method = "lm") +
  scale_color_viridis_d() +
  facet_grid(state ~ year) +
  coord_flip() 


#### Themes ####
# Custom theme example
price_df %>% mutate(year = year(date)) %>% # we can use the year() function from lubridate to grab the year from our date column
  filter(year %in% c(2022, 2023, 2024)) %>%  
  ggplot(aes(x = corn_price, y = soy_price, color = state)) +
  geom_point() +
  geom_smooth(formula = y~x, method = "lm") +
  scale_color_viridis_d() +
  facet_grid(state ~ year) +
  labs(title = "Corn vs. Soy Price", x = "Corn Price", y = "Soy Price", color = "State") + 
  theme(
    axis.text.x = element_text(size = 12, angle = 45), #
    axis.text.y = element_text(size = 12),
    axis.title = element_text(size =14), # Most X/Y split objects can also be simultaneously changed
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5, vjust = -1), # hjust = horizontal position, vjust = vertical position
    legend.title = element_text(size = 14, face = "bold"), 
    legend.position = "left", 
    legend.background = element_rect(fill = "grey"),
    panel.grid.major = element_line(color = "pink", linetype = "dashed"),
    panel.grid.minor = element_line(color = "red", linetype = "dashed"),
    panel.background = element_rect(fill = "purple"), 
    plot.background = element_rect(fill = "yellow", color = "red"),
    axis.line = element_blank(),
    axis.ticks = element_blank(),
    strip.background = element_rect(fill = "cyan"),
    strip.text = element_text(face = "italic")
  )

# Saving themes
our_theme <- function() {
  theme(
    axis.text.x = element_text(size = 12, color = "#c5c5c5"), #
    axis.text.y = element_text(size = 12, color = "#c5c5c5"),
    axis.title = element_text(size =14, color = "#c5c5c5"), # Most X/Y split objects can also be simultaneously changed
    plot.title = element_text(size = 16, face = "bold", color = "#c5c5c5", hjust = 0.5), # hjust = horizontal position, vjust = vertical position
    legend.title = element_text(size = 14, face = "bold",  color = "#c5c5c5"), 
    legend.position = "none", 
    legend.background = element_rect(fill = rgb(28,28,28, maxColorValue = 255)),
    legend.text = element_text(color = "#c5c5c5"),
    panel.grid.major = element_line(color = "#c5c5c5", linetype = "dashed"),
    panel.grid.minor = element_line(color = "#c5c5c5", linetype = "dashed"),
    panel.background = element_rect(fill = rgb(28,28,28, maxColorValue = 255)), 
    plot.background = element_rect(fill =rgb(28,28,28, maxColorValue = 255), color = rgb(28,28,28, maxColorValue = 255)),
    # axis.line = element_blank(),
    # axis.ticks = element_blank(),
    strip.background = element_rect(fill = rgb(28,28,28, maxColorValue = 255)),
    strip.text = element_text(color = "#c5c5c5")
  )
}

# Saving Color and Fill Scales
our_color_scale <- function() {
  scale_color_manual(values = c("#75bee9", "#FF7373", "#9fff70"))
}

our_fill_scale <- function() {
  scale_fill_manual(values = c("#75bee9", "#FF7373", "#9fff70"))
}


# Applying our Theme and Scale
price_df %>% mutate(year = year(date)) %>% # we can use the year() function from lubridate to grab the year from our date column
  filter(year %in% c(2022, 2023, 2024)) %>%  
  ggplot(aes(x = corn_price, y = soy_price, color = state)) +
  geom_point() +
  geom_smooth(formula = y~x, method = "lm") +
  facet_grid(state ~ year) +
  labs(title = "Corn vs. Soy Price", x = "Corn Price", y = "Soy Price", color = "State") + 
  our_theme() +
  our_color_scale()


#### Barplot ####
barplot <- price_df %>% mutate(month = month(date), year = year(date)) %>% # again we can use lubridate to grab what we want from our date column.
  filter(month == 2 & year == 2023) %>% 
  mutate(state = fct_reorder(state, corn_price, .desc = TRUE)) %>% 
  ggplot(aes(x = state, y = corn_price, fill = state)) +
  geom_bar(stat = "identity", width = 0.5) +
  labs(title = "February, 2023 Corn Price") +
  our_fill_scale() + 
  coord_flip()

plot(barplot)

#### Histograms ####
ggplot(price_df, aes(x = soy_price)) +
  geom_histogram(binwidth = 0.5) +
  labs(title = "UMR Distribution of Soybean Prices")

## Divided Distributions
ggplot(price_df, aes(x = soy_price, fill = state)) +
  geom_histogram(alpha = 0.8, binwidth = 0.5) +
  our_fill_scale()

### Boxplots ###
boxplot <- ggplot(price_df, aes(x = state, y = corn_price, fill = state)) +
  geom_boxplot() +
  geom_jitter() +
  our_fill_scale() +
  labs(title = "UMR Corn Price") +
  theme(
    legend.position = "none"
  )

plot(boxplot)


### Line Chart ###
# Checkout the structure of our date
str(price_df)

# Plot
line_plot <- price_df %>% filter(state == "IOWA") %>% 
  ggplot(aes(x = as.Date(date), y = corn_price)) +
  geom_line() +
  scale_x_date(date_labels = "%Y")

plot(line_plot)


#### Arranging Multiple Charts ####
# Function to examine distributions
## Data
data(mtcars)

## Create function
histogram_function <- function(data, column) {
  ggplot(data, aes(x = .data[[column]])) + 
    geom_histogram() +
    labs(title = paste(column)) +
    theme_minimal()
}

## What are our numeric columns
numeric_cols <- names(mtcars)[sapply(mtcars, is.numeric)]

## Apply to get a list of graphs
graph_list <- lapply(numeric_cols, function(col) histogram_function(mtcars, col))

## Create our grid
grid.arrange(grobs = graph_list, ncol = 4)

# Custom arranging saved plots
## Set our layout
lay <- rbind(c(1,3,3),
             c(2,3,3))

## Plot
grid.arrange(arrangeGrob(boxplot),
             arrangeGrob(line_plot),
             arrangeGrob(barplot),
             layout_matrix = lay,
             top = "Our Plots")

#### Interactive Graphs ####
# ggplotly
## Customize the tooltip
price_df <- price_df %>% mutate(text = paste0(
  "State: ", state,
  "\nCorn Price: ", corn_price,
  "\nSoybean Price: ", soy_price
))

## Graph 
scatterplot <- ggplot(data = price_df, aes(x = corn_price, y = soy_price, color = state)) +
  geom_point(aes(text = text)) +
  geom_smooth(formula = y~x, method = "lm") +
  scale_color_viridis_d()

ggplotly(scatterplot, tooltip = "text")

# plot_ly
## Make our color scale
n_states <- length(unique(price_df$state))
viridis_colors <- viridis(n_states)

## Make our plot
p <- price_df %>% mutate(date = ymd(date)) %>% 
  arrange(state, date) %>% 
  plot_ly(x = ~date, y = ~corn_price, type = "scatter", mode = "lines+markers", 
          color = ~state, colors = viridis_colors ) %>% 
  layout(title = "Corn Prices in UMR",
         xaxis = list(title = "Date"),
         yaxis = list(title = "Corn Price"),
         hovermode = "x unified")

p

#### Animated Plots ####
## Plot
animation <- ggplot(price_df, aes(x = ymd(date), y = corn_price, color = state)) +
  geom_line() + 
  geom_point() + 
  scale_color_viridis_d() +
  labs(title = paste("Corn Prices in UMR"), x = "Date", y = "Corn Price") +
  transition_reveal(ymd(date))

## Save
anim_save("animation.gif", animation = animation, renderer = gifski_renderer())

## Display
animate(animation, renderer = gifski_renderer())

#### Base R ####
# Histogram 
hist(price_df$soy_price, xlab = "Soy Price", ylab = "Frequency",
     main = "Histogram of Soy Prices in UMR",
     col = "cyan", border = "black",
     breaks = 20)

# Boxplot
state_colors <- viridis(n = length(unique(price_df$state)))

## Margin
par(mar = c(3, 3, 3, 8), xpd = TRUE) 

## Plot
boxplot(price_df$corn_price ~ price_df$state, col = state_colors, ylim = c(0, max(price_df$corn_price + 1)),
        xlab = "", ylab = "Corn Price")
legend("topright", legend = c("Iowa", "Minnesota", "Wisconsin"), col = state_colors , bty = "n", pch=20 , pt.cex = 3, cex = 1, horiz = FALSE, inset = c(-.3, 0.1))

# Scatterplot
## Initial Scatterplot
par(xpd = FALSE)
plot(price_df$corn_price, price_df$soy_price, col = c("red", "blue", "green"),
     pch = 16, xlab = "Corn Price", ylab = "Soy Price")

## Loop for trend lines
states <- unique(price_df$state)
colors <- c("red", "blue", "green")

for (i in seq_along(states)) {
  state_data <- subset(price_df, state == states[i])
  model <- lm(soy_price ~ corn_price, data = state_data)
  abline(model, col = colors[i], lwd = 2)
}

## Legend and margin
legend("topleft", legend = states, col = colors, pch = 16, lwd = 2)


# Bar Charts
## Filter our df
df_feb_2023 <- price_df %>% filter(year(date) == 2023 & month(date) == 2) 

## Plot
barplot(height = df_feb_2023$corn_price, names = df_feb_2023$state, col = c("red", "blue", "green"),
        ylab = "Corn Price", main = "February 2023 Corn Price",
        ylim = c(0, max(df_feb_2023$corn_price + 2)))

# Line Chart
## Filter
ia_df <- price_df %>% filter(state == "IOWA") %>% arrange(date)

## Plot
plot(as.Date(ia_df$date), ia_df$corn_price, type = "l", col = "blue", lwd = 2, 
     main = "Corn Prices in Iowa", ylab = "Corn Price", xlab = "Date")


library(tidyverse)

#### Format Corn ####
corn_price <- read.csv("corn_price.csv")

corn_price <- corn_price %>% select(c(Year, Period, State, Value))
colnames(corn_price) <- c("year", "month", "state", "corn_price")

#### Format soy ####
soy_price <- read.csv("soy_price.csv")

soy_price <- soy_price %>% select(c(Year, Period, State, Value))
colnames(soy_price) <- c("year", "month", "state", "soy_price")

#### Join ####
price_df <- corn_price %>% left_join(y = soy_price, by = c("year", "month", "state"))

#### Format Date ####
price_df$date <- paste0(price_df$year, "-", price_df$month)
price_df$date <- ymd(paste0(price_df$date, "-01"))

# Get rid of cols we don't need
price_df <- price_df %>% select(!c(year, month))

#### Write Out ####
write.csv(price_df, "prices.csv", row.names = FALSE)
